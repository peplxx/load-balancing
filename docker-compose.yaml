# Postgresql replication: https://github.com/bitnami/containers/blob/main/bitnami/postgresql/docker-compose-replication.yml
# Bitnami image: https://hub.docker.com/r/bitnami/postgresql
# Haproxy configuration: https://www.haproxy.com/documentation/haproxy-configuration-tutorials/

x-pg-env: &pg-env
  POSTGRESQL_REPLICATION_USER: ${POSTGRESQL_REPLICATION_USER}
  POSTGRESQL_REPLICATION_PASSWORD: ${POSTGRESQL_REPLICATION_PASSWORD}
  POSTGRESQL_DATABASE: ${POSTGRESQL_DATABASE}
  POSTGRESQL_USER: ${POSTGRESQL_USER}
  POSTGRESQL_PASSWORD: ${POSTGRESQL_PASSWORD}

x-pg-slave: &pg-env-slave
  POSTGRESQL_REPLICATION_MODE: slave
  POSTGRESQL_MASTER_HOST: postgres-master
  POSTGRESQL_MASTER_PORT_NUMBER: 5432

x-postgres-common: &postgres-common
  image: docker.io/bitnami/postgresql:17
  user: postgres
  restart: unless-stopped
  environment:
  networks:
    - default
  healthcheck:
    test: 'pg_isready -U ${POSTGRES_USER} --dbname=${POSTGRES_DB}'
    interval: 10s
    timeout: 5s
    retries: 5

x-app-env: &app-env
  DB_DBNAME: ${POSTGRESQL_DATABASE}
  DB_USER: ${POSTGRESQL_USER}
  DB_PASSWORD: ${POSTGRESQL_PASSWORD}
  DB_HOST: haproxy
  DB_WRITE_PORT: 5432
  DB_READ_PORT: 5433

x-app-common: &app-common
  restart: unless-stopped
  build: app/
  depends_on:
    - haproxy
  networks:
    - default

services:
  app1:
    <<: *app-common
    environment:
      <<: *app-env

  app2:
    <<: *app-common
    environment:
      <<: *app-env

  haproxy:
    image: haproxy:3.2
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    ports:
      - "5433:5433"   # Read-only endpoint
      - "5432:5432"   # Write-only endpoint
    networks:
      - default
    depends_on:
      postgres-master:
        condition: service_healthy
      postgres-slave1:
        condition: service_healthy
      postgres-slave2:
        condition: service_healthy

  postgres-master:
    <<: *postgres-common
    # pg_hba: https://www.postgresql.org/docs/14/auth-pg-hba-conf.html
    environment:
      <<: *pg-env
      POSTGRESQL_REPLICATION_MODE: master
      POSTGRES_HOST_AUTH_METHOD: "md5"
    volumes:
      - postgres-master-data:/var/lib/postgresql/data
  
  postgres-slave1:
    <<: *postgres-common
    environment:
      <<: 
        - *pg-env
        - *pg-env-slave
    volumes:
      - postgres-slave1-data:/var/lib/postgresql/data
    depends_on:
      postgres-master:
        condition: service_healthy

  postgres-slave2:
    <<: *postgres-common
    environment:
      <<: 
        - *pg-env
        - *pg-env-slave
    volumes:
      - postgres-slave2-data:/var/lib/postgresql/data
    depends_on:
      postgres-master:
        condition: service_healthy

  nginx:
    image: nginx:1.29
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    networks:
      - default
    depends_on:
      - app1
      - app2

volumes:
  postgres-master-data:
  postgres-slave1-data:
  postgres-slave2-data:

networks:
  default:
